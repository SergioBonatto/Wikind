Cong <a> <b> (f: a -> b) (x: a) (y: a) (e: Equal x y) : Equal (f x) (f y)
Cong a b f x y e = Equal.apply (k => f k) e

#derive[match]
type Ev ~ (n: Nat){
  ev_z : Ev Nat.zero
  ev_ss <n : Nat> (pred: Ev n) : Ev (Nat.succ (Nat.succ n))
}

// type Wrong_ev ~ (n: Nat){
  // wrong_ev_z : Ev Nat.zero
  // wrong_ev_ss (pred: Ev n) : Ev (Nat.succ (Nat.succ n))
// }


Isnt_even <p> (n: Nat) (e: Ev n) : Empty -> p
Isnt_even n e = (x: Empty) => Empty.absurd x 

Ev_4 : Ev 4n
Ev_4 = Ev.ev_ss 2n (Ev.ev_ss 0n Ev.ev_z)

Ev_plus5 (n: Nat) : Ev n -> Ev (Nat.add 4n n)
Ev_plus5 n = x => Ev.ev_ss (Ev.ev_ss x)

IsEven (n: Nat) : Type
IsEven Nat.zero = Unit
IsEven (Nat.succ Nat.zero) = Empty
IsEven (Nat.succ (Nat.succ n)) = IsEven n

ToEmpty (a: Type) : Empty
// ToEmpty a =
// (Equal.rewrite chn_mir
    // (x => match Nat x {
      // zero => Unit
      // succ => Empty
    // })
    // (Unit.new))
  // Empty.absurd absurdo
// ?

#partial
Ev_minus2 (n: Nat) (e: Ev n) : Ev (Nat.pred (Nat.pred n))
Ev_minus2 Nat.zero e = e
Ev_minus2 (Nat.succ Nat.zero) e = Ev.ev_z
Ev_minus2 (Nat.succ (Nat.succ n)) (Ev.ev_ss e) = e
// Ev_minus2 (Nat.succ (Nat.succ n)) (Ev.ev_z) = ?

#partial
Ev_prop (n: Nat) : Ev (Nat.pred (Nat.pred (Nat.succ (Nat.succ n))))
Ev_prop Nat.zero = Ev.ev_z
Ev_prop (Nat.succ Nat.zero) = Empty.absurd (ToEmpty (IsEven 1n))
Ev_prop (Nat.succ (Nat.succ n)) = Ev.ev_ss (Ev_prop n)


#partial
Evss_ev (n: Nat) (e: Ev (Nat.succ (Nat.succ n))) : Ev n
Evss_ev Nat.zero e = Ev.ev_z
Evss_ev (Nat.succ Nat.zero) (Ev.ev_ss e) = e
Evss_ev (Nat.succ n) (Ev.ev_ss e)  = e
// Evss_ev n (Ev.ev_z) = ?
Evss_ev n (Ev.ev_ss e) = e 

// one_not_even : Not (Ev 1)
// one_not_even Ev_0 impossible
// one_not_even (Ev_SS _) impossible
One_not_even : Not (Ev 1n)
One_not_even = Empty.absurd _

Absurd <p> (x: p) : Empty
Absurd p x = Absurd.not (Absurd.not.aux p x)

Absurd.not <p> (x: p -> Empty) : Empty
// Absurd.not p (x) =

Absurd.not.aux <p> (x: p) : p -> Empty
// Absurd.not.aux p x =


Absurdo <p> (x: p) : Empty -> p
Absurdo p x = (e: Empty) => x



// SSSSev__even : Ev (S (S (S (S n)))) -> Ev n
// SSSSev__even e = ?SSSSev__even_rhs
Ssssev__even (n: Nat) (e: Ev (Nat.succ (Nat.succ (Nat.succ (Nat.succ n))))) : Ev n
Ssssev__even n e = 
  let test  = Evss_ev (Nat.succ (Nat.succ n)) e
  let test2 = Evss_ev n test
  test2

// even5_nonsense : Ev 5 -> 2 + 2 = 9
// even5_nonsense e = ?even5_nonsense_rhs
Even5_nonsense (e: Ev 5n) : Equal (Nat.add 2n 2n) 9n
Even5_nonsense e = Empty.absurd (Absurd e)


// Ev_even : Ev n -> (k ** n = double k)
#partial
Ev_even 
  (n: Nat)
  (e: Ev n) :
  (Sigma Nat(k => Equal n ( Nat.double k)))
Ev_even Nat.zero e = Sigma.new 0n Equal.refl
Ev_even (Nat.succ Nat.zero) e = Empty.absurd _
Ev_even (Nat.succ (Nat.succ n)) (Ev.ev_ss e) = Ev_even_ss n (Ev_even n e)
// Ev_even (Nat.succ (Nat.succ n)) Ev.ev_z = ?

Ev_even_ss 
  (n: Nat)
  (s: Sigma Nat (k => Equal n (Nat.double k)) )
  :(Sigma Nat (k => (Equal (Nat.succ (Nat.succ n)) (Nat.double k)))) 
Ev_even_ss Nat.zero s = Sigma.new 1n Equal.refl
Ev_even_ss n (Sigma.new a b fst snd) =
  let cong1 = (Equal.apply (x => Nat.succ x) (specialize b into #0 in snd))
  let cong2 = Equal.apply (x => Nat.succ x) cong1
  Sigma.new (Nat.succ fst) cong2

Ev_double (n: Nat)      : Ev (Nat.double n)
Ev_double Nat.zero      = Ev.ev_z
Ev_double (Nat.succ n)  = Ev.ev_ss (Ev_double n)

Ev_even_equiv (n: Nat)  : Equivalence (Ev n) (Sigma Nat (k => Equal n (Nat.double k)))
Ev_even_equiv n         = Equivalence.new (x => Ev_even n x) (y => From_eee n y)

From_eee (n: Nat) (s: Sigma Nat (k => Equal n (Nat.double k))) : Ev n
From_eee n (Sigma.new a b fst snd) =
  Equal.rewrite (Equal.mirror (specialize b into #0 in snd)) (x =>(Ev x)) (Ev_double fst)

// ev_sum : Ev n -> Ev m -> Ev (n + m)
// ev_sum x y = ?ev_sum_rhs
#partial
Ev_sum (n: Nat) (m: Nat) (e1: Ev n) (e2: Ev m) : Ev (Nat.add n m)
Ev_sum Nat.zero m e1 e2 = e2
// Ev_sum (Nat.succ Nat.zero) m e1 e2 = ABSURDO!!!
Ev_sum (Nat.succ (Nat.succ n)) m (Ev.ev_ss e1) e2 = 
  let test = Ev_sum n m e1 e2
  Ev.ev_ss test
  // ?

#derive[match]
type Evn ~ (n: Nat){
  z : Evn Nat.zero
  d : Evn (Nat.succ (Nat.succ Nat.zero))
  sum <n : Nat> <m: Nat> (evn: Evn n) (evm: Evn m) : Evn (Nat.add n m)
}


Ev_evn (n: Nat): Equivalence (Ev n) (Evn n)

#partial
To_ev_evn (n: Nat) (e : Ev n) : (Evn n)
To_ev_evn Nat.zero e = Evn.z
To_ev_evn (Nat.succ Nat.zero) e = Empty.absurd _
To_ev_evn (Nat.succ (Nat.succ n)) (Ev.ev_ss e) = 
  let ind = To_ev_evn n e
  let test = Evn.sum ind Evn.d
  let sum = Sum2 n
  let rwt = Equal.rewrite (sum) (x => (Evn (x))) test
  rwt
  // ?

Sum2 (n: Nat)     : Equal (Nat.add n 2n) (Nat.succ (Nat.succ n))
Sum2 Nat.zero     = Equal.refl
Sum2 (Nat.succ n) = Equal.apply (x => Nat.succ x) (Sum2 n)

From_ev_evn  (n: Nat) (e : Evn n) : (Ev n)
From_ev_evn Nat.zero e = Ev.ev_z
From_ev_evn (Nat.succ (Nat.succ n)) e = 
  let ind = From_ev_evn n ?
  ?


Main {
  // "Hello Word"
  Ev (Nat.pred (Nat.pred Nat.zero))
}


