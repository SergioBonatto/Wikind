Evenb_double (k: Nat)     : Equal (Nat.is_even (Nat.double k)) Bool.true
Evenb_double Nat.zero     = Equal.refl
Evenb_double (Nat.succ k) = Evenb_double k

Evenb_double_conv (n: Nat):
  Sigma Nat (k => (Equal n (Bool.if (Evenb n) (Nat.double k) (Nat.succ (Nat.double k)))))
Evenb_double_conv Nat.zero                        = $ 0n (Equal.refl)
Evenb_double_conv (Nat.succ Nat.zero)             = $ 0n (Equal.refl)
Evenb_double_conv (Nat.succ (Nat.succ n))  =
  let nnb  = Not_not_eq_b (Evenb n)
  let ind  = Evenb_double_conv n
  let test = match Sigma ind {
    new fst snd =>
      (
        let test3 = Equal.apply (x => Nat.succ (Nat.succ x)) snd
        let test4 = Big_ifao n fst
        let chn   = Equal.chain test3 test4
        chn
      )
    }
  let test2 = match Sigma ind {
    new fst snd => (
      let nnb  = Not_not_eq_b (Evenb n)
      let rwt  = Equal.rewrite (Equal.mirror nnb) (x => (Equal Nat n (Bool.if _ (x) (Nat.double fst) (Nat.succ (Nat.double fst))))) snd
      let rwt1 = Equal.rewrite rwt (x => (Sigma Nat (k => (Equal Nat x (Bool.if Nat (Evenb n) (Nat.double k) (Nat.succ (Nat.double k))))))) ind
      let rwt2 = Equal.rewrite nnb (x => (Sigma Nat (k => (Equal Nat (Bool.if Nat (Bool.not (Bool.not (Evenb n))) (Nat.double fst) (Nat.succ (Nat.double fst))) (Bool.if Nat (Evenb n) (Nat.double k) (Nat.succ (Nat.double k))))))) rwt1
      rwt2
    ) 
  } 
  let test3 = match Sigma test2 {
    new fst snd => snd
  }
  let test4 = match Sigma test2 {
    new fst snd => fst
  }
  let rwt3  = Equal.rewrite (test3) (x => (Sigma Nat (k => (Equal Nat (x) (_))))) test2
  let test5 = match Sigma test2 {
    new fst snd => (Big_ifinho n fst)
  }
  let chn = Equal.chain test (test5)
?

Evenb (n: Nat)              : Bool
Evenb Nat.zero              = Bool.true
Evenb (Nat.succ k)          = Bool.not (Evenb k)

Not_not_eq_b (b: Bool)  : Equal (Bool.not (Bool.not b)) b
Not_not_eq_b Bool.true  = Equal.refl
Not_not_eq_b Bool.false = Equal.refl

Big_ifao (n: Nat) (k: Nat):
  (Equal (Nat.succ (Nat.succ (Bool.if (Evenb n) (Nat.double k) (Nat.succ (Nat.double k)))))
  (Bool.if (Evenb n) (Nat.succ (Nat.succ (Nat.double k))) (Nat.succ (Nat.succ (Nat.succ (Nat.double k))))))
Big_ifao Nat.zero k                 = Equal.refl
Big_ifao (Nat.succ Nat.zero) k      = Equal.refl
Big_ifao (Nat.succ (Nat.succ n)) k  =
  let ind = Big_ifao n k
  let nnb = Not_not_eq_b (Evenb n)
  let rwt = Equal.rewrite (Equal.mirror nnb) (x =>  Equal (Nat.succ (Nat.succ (Bool.if (x) _ _))) (Bool.if (x) _ _))  (ind)
  rwt

Big_ifinho (n: Nat) (fst: Nat) : (Equal Nat  (Bool.if _ (Evenb n) (Nat.succ (Nat.succ (Nat.double fst))) (Nat.succ (Nat.succ (Nat.succ (Nat.double fst)))))   (Bool.if Nat (Evenb n) (Nat.double fst) (Nat.succ (Nat.double fst))))
